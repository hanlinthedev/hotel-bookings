// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  googleId       String?         @unique
  firstName      String?
  lastName       String?
  picture        String?
  refreshTokens  RefreshToken[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  roles          Role[]          @default([USER])
  loyaltyAccount LoyaltyAccount?
  bookings       Booking[]
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Room {
  id          String    @id @default(uuid())
  number      String    @unique
  type        String
  price       Float
  description String?
  capacity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model LoyaltyAccount {
  id        String         @id @default(uuid())
  userId    String         @unique
  points    Int            @default(0)
  tier      MembershipTier @default(STANDARD)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])

  @@map("loyalty_accounts")
}

model Payment {
  id              String        @id @default(uuid())
  bookingId       String        @unique
  amount          Float
  currency        String        @default("USD")
  stripePaymentId String        @unique
  status          PaymentStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}

model Booking {
  id            String        @id @default(uuid())
  userId        String
  roomId        String
  checkIn       DateTime
  checkOut      DateTime
  totalPrice    Float
  depositAmount Float
  status        BookingStatus @default(PENDING_DEPOSIT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  room    Room     @relation(fields: [roomId], references: [id])
  payment Payment?

  @@index([userId])
  @@index([roomId])
  @@index([checkIn, checkOut])
}

enum Role {
  USER
  ADMIN
}

enum MembershipTier {
  STANDARD
  SILVER
  GOLD
  PLATINUM
}

enum BookingStatus {
  PENDING_DEPOSIT
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}
